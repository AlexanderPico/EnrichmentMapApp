<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>EnrichmentMap</groupId>
  <version>1.3.0</version>
  <artifactId>EnrichmentMap</artifactId>
  <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    </properties>
    <dependencies>
 		<dependency>
  			<groupId>org.junit</groupId>
  			<artifactId>junit</artifactId>
  			<version>0.0.1</version>
  			<scope>system</scope>
  			<systemPath>${project.basedir}/lib/junit.jar</systemPath>
  		</dependency>
  	</dependencies>
  
	<!--  repository settings are required for the build number maven plugin-->

	<profiles>
	 	
	<!-- Create two profiles.  One for the base Enrichment Map jar and One for the Enrichment map jar integrated into GSEA
	(profile: -PEnrichmentMap) Enrichment map jar contains plugin.props and Enrichment_Map_Plugin main class
	(profile: -PEM_gsea) GSEA Enrichment map plugin contains plugin_gsea.props and Enrichment_Map_Plugin_GSEA main class
	We need two different main classes so if both are installed Cytoscape is able to load both plugins if they are present without any conflicts
	Before building either of these profiles need to run mvn clean to make sure they are built correctly -->
	<profile>
		<id>EnrichmentMap</id>
		<activation>
      		<activeByDefault>true</activeByDefault>
    		</activation>
  		<build>
        		<finalName>${project.artifactId}-${project.version}-r${git.commit.id.abbrev}_${buildNumber}_${git.commit.id.describe}</finalName>
  			<plugins>
				<plugin>
          			<artifactId>maven-jar-plugin</artifactId>
          				<configuration>
            				<classifier></classifier>
            				<excludes>
            					<exclude>**/Enrichment_Map_Plugin_GSEA.*</exclude>
            				</excludes>
          				</configuration>
        			</plugin>
        			<plugin>
        				<groupId>org.codehaus.mojo</groupId>
        				<artifactId>buildnumber-maven-plugin</artifactId>
        				<version>1.1</version>
        				<executions>
          				<execution>
            					<phase>validate</phase>
            					<goals>
              					<goal>create</goal>
            					</goals>
          				</execution>
        				</executions>
        				<configuration>
          				<doCheck>true</doCheck>
          				<doUpdate>false</doUpdate>
          				<format>{0,number}</format>
          				<items>
            					<item>buildNumber</item>
          				</items>
        				</configuration>
      			  		</plugin>
      			  		<plugin>
        				<groupId>org.apache.maven.plugins</groupId>
        				<artifactId>maven-compiler-plugin</artifactId>
        				<version>3.0</version>
        				<configuration>
          				<source>1.5</source>
          				<target>1.5</target>
        				</configuration>
      			  </plugin>
      			  <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>2.1.7</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>revision</goal>
                         </goals>
                    </execution>
                </executions>

               <configuration>
                    <!-- that's the default value, you don't have to set it -->
                    <prefix>git</prefix>

                    <!-- that's the default value -->
                    <dateFormat>dd.MM.yyyy '@' HH:mm:ss z</dateFormat>

                    <!-- true is default here, it prints some more information during the build -->
                    <verbose>false</verbose>

                    <!--
                        If you'd like to tell the plugin where your .git directory is,
                        use this setting, otherwise we'll perform a search trying to
                        figure out the right directory. It's better to add it explicite IMHO.
                    -->
                    <dotGitDirectory>${project.basedir}/../.git</dotGitDirectory>

                    <!-- ALTERNATE SETUP - GENERATE FILE -->
                    <!--
                        If you want to keep git information, even in your WAR file etc,
                        use this mode, which will generate a properties file (with filled out values)
                        which you can then normally read using new Properties().load(/**/)
                    -->

                    <!--
                        this is true by default; You may want to set this to false, if the plugin should run inside a
                        <packaging>pom</packaging> project. Most projects won't need to override this property.

                        For an use-case for this kind of behaviour see: https://github.com/ktoso/maven-git-commit-id-plugin/issues/21
                    -->
                    <skipPoms>true</skipPoms>

                    <!-- this is false by default, forces the plugin to generate the git.properties file -->
                    <generateGitPropertiesFile>false</generateGitPropertiesFile>

                    <!-- The path for the to be generated properties file, it's relative to ${project.basedir} -->
                    <generateGitPropertiesFilename>src/main/resources/revision.txt</generateGitPropertiesFilename>

                    <!-- true by default, controls whether the plugin will fail when no .git directory is found, when set to false the plugin will just skip execution -->
                    <!-- @since 2.0.4 -->
                    <failOnNoGitDirectory>false</failOnNoGitDirectory>

                    <!-- @since 2.1.0 -->
                    <!-- 
                        read up about git-describe on the in man, or it's homepage - it's a really powerful versioning helper 
                        and the recommended way to use git-commit-id-plugin. The configuration bellow is optional, 
                        by default describe will run "just like git-describe on the command line", even though it's a JGit reimplementation.
                    -->
                    <gitDescribe>

                        <!-- don't generate the describe property -->
                        <skip>false</skip>

                        <!-- 
                            if no tag was found "near" this commit, just print the commit's id instead, 
                            helpful when you always expect this field to be not-empty 
                        -->
                        <always>false</always>
                        <!--
                             how many chars should be displayed as the commit object id? 
                             7 is git's default, 
                             0 has a special meaning (see end of this README.md), 
                             and 40 is the maximum value here 
                        -->
                        <abbrev>7</abbrev>

                        <!-- when the build is triggered while the repo is in "dirty state", append this suffix -->
                        <dirty>-dev</dirty>

                        <!-- 
                             always print using the "tag-commits_from_tag-g_commit_id-maybe_dirty" format, even if "on" a tag. 
                             The distance will always be 0 if you're "on" the tag. 
                        -->
                        <forceLongFormat>false</forceLongFormat>
                    </gitDescribe>
                </configuration>

            </plugin>     			  				  
    				</plugins>
    				<resources>
            			<resource>
                			<directory>${project.basedir}/src/main/resources</directory>
						<excludes>
							<exclude>org/baderlab/csplugins/enrichmentmap/gsea/plugin.props</exclude>
						</excludes>
						<includes>
							<include>**/*.properties</include>
                    					<include>**/*.xml</include>
                    					<include>**/*.txt</include>
                    					<include>**/*.gif</include>
                    					<include>**/*.png</include>
                    					<include>**/*.props</include>
						</includes>
                			<filtering>true</filtering>
            			</resource>
	    				<resource>
						<directory>${project.basedir}/resources</directory>
						<excludes>
							<exclude>EM_EBC_TestData/**</exclude>
							<exclude>Graphics_for_Manual/**</exclude>
							<exclude>scripts/**</exclude>
						</excludes>
	    				</resource>
        			</resources>
			</build>
		</profile>
	<profile>
		<id>EM_gsea</id>
  		<build>
        		<finalName>${project.artifactId}-${project.version}-r${git.commit.id.abbrev}_${buildNumber}_${git.commit.id.describe}</finalName>
  			<plugins>
				<plugin>
          			<artifactId>maven-jar-plugin</artifactId>
          				<configuration>
            				<classifier>gsea</classifier>
            				<excludes>
            					<exclude>**/Enrichment_Map_Plugin.*</exclude>
            				</excludes>
          				</configuration>
        			</plugin>
        			<plugin>
        				<groupId>org.codehaus.mojo</groupId>
        				<artifactId>buildnumber-maven-plugin</artifactId>
        				<version>1.1</version>
        				<executions>
          				<execution>
            					<phase>validate</phase>
            					<goals>
              					<goal>create</goal>
            					</goals>
          				</execution>
        				</executions>
        				<configuration>
          				<doCheck>true</doCheck>
          				<doUpdate>false</doUpdate>
          				<format>{0,number}</format>
          				<items>
            					<item>buildNumber</item>
          				</items>
        				</configuration>
      			  </plugin>
            		  <plugin>
        				<groupId>org.apache.maven.plugins</groupId>
        				<artifactId>maven-compiler-plugin</artifactId>
        				<version>3.0</version>
        				<configuration>
          				<source>1.5</source>
          				<target>1.5</target>
        				</configuration>
      			  </plugin>      			  
            		   <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>2.1.7</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>revision</goal>
                         </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- that's the default value, you don't have to set it -->
                    <prefix>git</prefix>

                    <!-- that's the default value -->
                    <dateFormat>dd.MM.yyyy '@' HH:mm:ss z</dateFormat>

                    <!-- true is default here, it prints some more information during the build -->
                    <verbose>false</verbose>

                    <!--
                        If you'd like to tell the plugin where your .git directory is,
                        use this setting, otherwise we'll perform a search trying to
                        figure out the right directory. It's better to add it explicite IMHO.
                    -->
                    <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>

                    <!-- ALTERNATE SETUP - GENERATE FILE -->
                    <!--
                        If you want to keep git information, even in your WAR file etc,
                        use this mode, which will generate a properties file (with filled out values)
                        which you can then normally read using new Properties().load(/**/)
                    -->

                    <!--
                        this is true by default; You may want to set this to false, if the plugin should run inside a
                        <packaging>pom</packaging> project. Most projects won't need to override this property.

                        For an use-case for this kind of behaviour see: https://github.com/ktoso/maven-git-commit-id-plugin/issues/21
                    -->
                    <skipPoms>true</skipPoms>

                    <!-- this is false by default, forces the plugin to generate the git.properties file -->
                    <generateGitPropertiesFile>false</generateGitPropertiesFile>

                    <!-- The path for the to be generated properties file, it's relative to ${project.basedir} -->
                    <generateGitPropertiesFilename>src/main/resources/revision.txt</generateGitPropertiesFilename>

                    <!-- true by default, controls whether the plugin will fail when no .git directory is found, when set to false the plugin will just skip execution -->
                    <!-- @since 2.0.4 -->
                    <failOnNoGitDirectory>false</failOnNoGitDirectory>

                    <!-- @since 2.1.0 -->
                    <!-- 
                        read up about git-describe on the in man, or it's homepage - it's a really powerful versioning helper 
                        and the recommended way to use git-commit-id-plugin. The configuration bellow is optional, 
                        by default describe will run "just like git-describe on the command line", even though it's a JGit reimplementation.
                    -->
                    <gitDescribe>

                        <!-- don't generate the describe property -->
                        <skip>false</skip>

                        <!-- 
                            if no tag was found "near" this commit, just print the commit's id instead, 
                            helpful when you always expect this field to be not-empty 
                        -->
                        <always>false</always>
                        <!--
                             how many chars should be displayed as the commit object id? 
                             7 is git's default, 
                             0 has a special meaning (see end of this README.md), 
                             and 40 is the maximum value here 
                        -->
                        <abbrev>7</abbrev>

                        <!-- when the build is triggered while the repo is in "dirty state", append this suffix -->
                        <dirty>-dev</dirty>

                        <!-- 
                             always print using the "tag-commits_from_tag-g_commit_id-maybe_dirty" format, even if "on" a tag. 
                             The distance will always be 0 if you're "on" the tag. 
                        -->
                        <forceLongFormat>false</forceLongFormat>
                    </gitDescribe>
                </configuration>
            </plugin>				
    				</plugins>
    				<resources>
            			<resource>
                			<directory>${project.basedir}/src/main/resources</directory>
						<excludes>
							<exclude>org/baderlab/csplugins/enrichmentmap/plugin.props</exclude>
						</excludes>						
						<includes>
							<include>**/*.properties</include>
                    					<include>**/*.xml</include>
                    					<include>**/*.txt</include>
                    					<include>**/*.gif</include>
                    					<include>**/*.png</include>
						</includes>
                			<filtering>true</filtering>
            			</resource>
	    				<resource>
						<directory>${project.basedir}/resources</directory>
						<excludes>
							<exclude>EM_EBC_TestData/**</exclude>
							<exclude>Graphics_for_Manual/**</exclude>
							<exclude>scripts/**</exclude>
						</excludes>
	    				</resource>
        			</resources>
			</build>
		</profile>
		
		<!-- specify the cytoscape jar directory depending on which OS being compiled on -->
		<profile>
			<activation>
				<os>
					<family>windows</family>
				</os>
			</activation>
			<dependencies>
  				<dependency>
  					<groupId>org.cytoscape</groupId>
  					<artifactId>cytoscape</artifactId>
  					<version>2.8.3</version>
  					<scope>system</scope>
  					<systemPath>C:\Program Files\Cytoscape_v2.8.3\cytoscape.jar</systemPath>
  				</dependency>
  			</dependencies>
		</profile>
		<profile>
			<activation>
				<os>
					<family>mac</family>
				</os>
			</activation>
			<dependencies>
  				<dependency>
  					<groupId>org.cytoscape</groupId>
  					<artifactId>cytoscape</artifactId>
  					<version>2.8.3</version>
  					<scope>system</scope>
  					<systemPath>/Applications/Cytoscape_v2.8.3/cytoscape.jar</systemPath>
  				</dependency>
  			</dependencies>
		</profile>
	
	</profiles>
	<scm>
		<connection>scm:git:git://github.com/BaderLab/EnrichmentMapApp.git</connection>
		<url>https://github.com/BaderLab/EnrichmentMapApp</url>
		<developerConnection>scm:git:git@github.com:BaderLab/EnrichmentMapApp.git</developerConnection>
	</scm>
</project>
